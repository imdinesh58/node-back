{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"lo",
				"log"
			],
			[
				"test",
				"testCard"
			],
			[
				"op",
				"opts"
			],
			[
				"opt",
				"opts"
			],
			[
				"valid",
				"validCard"
			],
			[
				"ps",
				"pspForm"
			],
			[
				"utf",
				"utf8hash"
			],
			[
				"COM",
				"COMPLUS"
			],
			[
				"pay",
				"payload"
			],
			[
				"sha",
				"shaSign"
			],
			[
				"c",
				"check"
			],
			[
				"re",
				"return"
			],
			[
				"SH",
				"SHASIGN"
			],
			[
				"com",
				"compute"
			],
			[
				"psp",
				"pspData"
			],
			[
				"fun",
				"fun	Function"
			],
			[
				"to",
				"toLowerCase"
			],
			[
				"ind",
				"indexOf"
			],
			[
				"pa",
				"payId"
			],
			[
				"num",
				"number"
			],
			[
				"nu",
				"number"
			],
			[
				"bogu",
				"bogusCard"
			],
			[
				"res",
				"result"
			],
			[
				"qu",
				"query"
			],
			[
				"er",
				"PostFinanceError"
			],
			[
				"in",
				"input"
			],
			[
				"pro",
				"process"
			],
			[
				"set",
				"settings"
			],
			[
				"ali",
				"aliasusage"
			],
			[
				"auth",
				"authorized"
			],
			[
				"is",
				"isExpired"
			],
			[
				"l",
				"length"
			],
			[
				"no",
				"now"
			],
			[
				"get",
				"getMonth"
			],
			[
				"post",
				"postfinance"
			],
			[
				"O",
				"OPERATION"
			],
			[
				"cu",
				"custom"
			],
			[
				"ord",
				"orderId"
			],
			[
				"a",
				"amount"
			],
			[
				"order",
				"orderid"
			],
			[
				"grou",
				"groupId"
			],
			[
				"or",
				"orderId"
			],
			[
				"orde",
				"orderId"
			],
			[
				"tr",
				"transactionData"
			],
			[
				"tes",
				"testAlias"
			],
			[
				"od",
				"orderId"
			],
			[
				"NC",
				"NCERROR"
			],
			[
				"api",
				"apiPassword"
			],
			[
				"n",
				"number"
			],
			[
				"payme",
				"paymentData"
			],
			[
				"con",
				"console"
			],
			[
				"me",
				"message"
			],
			[
				"N",
				"NCERROR"
			],
			[
				"ta",
				"tagName"
			],
			[
				"xml",
				"xmlutils"
			],
			[
				"req",
				"requestOptions"
			],
			[
				"payment",
				"paymentMethod"
			],
			[
				"for",
				"forEach"
			],
			[
				"fir",
				"firstName"
			],
			[
				"parse",
				"parseInt"
			],
			[
				"po",
				"postfinanceStr"
			],
			[
				"main",
				"maintenancedirect"
			],
			[
				"de",
				"default"
			],
			[
				"ne",
				"new"
			],
			[
				"orders",
				"orders"
			],
			[
				"sh",
				"should"
			],
			[
				"tok",
				"tokenStr"
			],
			[
				"cr",
				"createToken"
			],
			[
				"ty",
				"type"
			],
			[
				"fin",
				"final"
			],
			[
				"hex",
				"hexsig"
			],
			[
				"cre",
				"created"
			],
			[
				"e",
				"errmsg"
			],
			[
				"id",
				"idx"
			],
			[
				"update",
				"updated"
			],
			[
				"next",
				"nextDate"
			],
			[
				"ge",
				"getDay"
			],
			[
				"nex",
				"nextSeller"
			],
			[
				"g",
				"getDay"
			],
			[
				"li",
				"limit"
			],
			[
				"lim",
				"limitSeller"
			],
			[
				"new",
				"newuser"
			],
			[
				"timeout",
				"timeoutAndNotPaid"
			],
			[
				"time",
				"timelimit"
			],
			[
				"sts",
				"statics"
			],
			[
				"week",
				"weekdays"
			],
			[
				"dis",
				"displayName"
			],
			[
				"ca",
				"cancel"
			],
			[
				"it",
				"item"
			],
			[
				"mo",
				"monday"
			],
			[
				"pho",
				"phoneNumbers"
			],
			[
				"mon",
				"monday"
			],
			[
				"Use",
				"UserSchema"
			],
			[
				"pr",
				"product"
			],
			[
				"s",
				"shop"
			],
			[
				"cac",
				"cancel"
			],
			[
				"ven",
				"vendor"
			],
			[
				"ve",
				"vendor"
			],
			[
				"ite",
				"items"
			],
			[
				"shop",
				"shopname"
			],
			[
				"eval",
				"evaletolab"
			],
			[
				"p",
				"products"
			],
			[
				"sku",
				"skus"
			],
			[
				"pos",
				"postfinance"
			],
			[
				"ex",
				"exec"
			],
			[
				"db",
				"dborder"
			],
			[
				"err",
				"errors"
			],
			[
				"task",
				"tasks"
			],
			[
				"tak",
				"tasks"
			],
			[
				"st",
				"status"
			],
			[
				"ad",
				"addresses"
			],
			[
				"add",
				"address"
			],
			[
				"fa",
				"fail_msg"
			],
			[
				"val",
				"validator"
			],
			[
				"not",
				"notified"
			],
			[
				"SERV",
				"VCAP_SERVICES"
			],
			[
				"im",
				"implemented"
			],
			[
				"sta",
				"status"
			],
			[
				"prod",
				"product"
			],
			[
				"item",
				"item"
			],
			[
				"fu",
				"fulfillment"
			],
			[
				"un-",
				"un-autre-shop"
			],
			[
				"type",
				"typeof"
			],
			[
				"find",
				"findNextShippingDay"
			],
			[
				"di",
				"disabled"
			],
			[
				"cat",
				"categories"
			],
			[
				"quan",
				"quantit√©"
			],
			[
				"ac",
				"active"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "## Getting started\n\nKaribou-payment gateway is currently in beta. Before joining the beta program it \nis highly recommended that you get your merchant account first. After signing\nup with PostFinance, you will receive thoses tokens:\n\n + PSID - used to identify your account on PostFinance\n + API password - password for you PostFinance account\n (+ Processor ID - the ID of the gateway that you will use for transactions)\n\nInitially, you will receive a sandbox processor ID. The sandbox is used for\ntesting, and you cannot actually process transactions using the sandbox. Keep\nin mind that you should only run unit tests that come with Karibou-payment using the\nsandbox processor ID.\n\n### Overview\n\nWhen using the Karibou-payment gateway, you basically deal with two separate\nconcepts: payment methods (cards) and transactions (making/loosing money).\nKaribou-payment's API reflects this dualism. It provides two main constructors that you\nwill use most of the time: `Card` and `Transaction`.\n\nOnce created the card objects have the following methods:\n\n + `card.create()`      : creates a new payment methods\n + `card.load()`        : fetches payment method data from the PostFinance vault\n + `card.update()`      : updates the payment method details\n + `card.retain()`      : instructs PostFinance to permanently save the payment method\n + `card.redact()`      : instructs PostFinance to remove the payment method from vault\n\n(See notes about PCI compliance before you start using some of these methods.)\n\nThe transaction object is constructed using the `Transaction` constructor. The\ntransaction object only has one method:\n\n + `transaction.process()`\n\nThis method takes a card object as its argument, and runs a transaction against\nthe payment method associated with the card.\n\n### Notes on PCI compliance\n\nThere are two ways you can use the PostFinance gateway with Daimyo in terms of\npayment methods management. One is server-to-server, where you handle the \ncardholder data, and pass them on to the gateway. Another method is transparent\nredirect, where you set up a web form that submits directly to the gateway, and\nyou only receive a _payment method token_ that is associated with whatever data\nthe user submitted. \n\nWhile the server-to-server method is useful in cases a web form required for\ntransparent redirect method cannot be set up (for example, for single-page AJAX\napps, where cross-site request restrictions apply), you have to be aware that\nfull PCI compliance for class C merchants is still required. Class C PCI\ncompliance may involve on-site audits and/or audits of any 3rd party\ninfrastructure you might be using, and many other steps. You can read more\nabout PCI compliance at\n[www.pcisecuritystandards.org](https://www.pcisecuritystandards.org/).\n\nAlso note that Daimyo itself has _not_ been atested or tested for PCI\ncompliance, so use of Daimyo in your environment may negatively affect your\ncapacity to achieve PCI compliance. While Daimyo's author sincerely believes\nthat Daimyo is reasonably safe (or, rather, will be when a full release is\nmade), we do not, and cannot make any guarantees to that effect, either\nexplicit or implied, as noted in the\n[LICENSE](https://github.com/HerdHound/Daimyo/blob/master/LICENSE). Daimyo is\nprovided to you as is, with no implied and/or explicit warranties of any sort.\nIn other words, you are on your own using Daimyo if you are looking for PCI\ncompliance. Good news is, source code is availabe, so you can make any\nnecessary adjustments. (Don't forget to send us a pull request if you do so.)\n\n### Ashigaru and single-page AJAX apps\n\nIf you have an AJAX-intesive website that cannot make regular POST requests\nusing web forms, you might want to try using the Ashigaru jQuery plugin. The\nplugin is included in the Daimyo project directory under `/support`\nsubdirectory. For more information on how to set up your server for use with\nAshigaru, and basic usage of this plugin, take a look at Ashigaru's\ndocumentation. You can also find a \n[functional demo](http://herdhound.github.com/Daimyo/example/ashigaru/) online.\n\nAshigaru has been tested only on the latest browsers. Browsers that are\ncurrently supported by Ashigaru are:\n\n + Firefox 5.0+ (probably works on 4.0 and older as well)\n + Internet Explorer 8.0+ (probably works on older, but IE6 is probably broken)\n + Opera 11.0+ (not sure it would work in older releases)\n + Chrome 13.0+ (should work in most version of Chrome)\n\nBasically, ashigaru is a very simple plugin which uses technology that has been\navailable for quite some time, so there is no reason to believe it wouldn't\nwork on older browsers. If you bump into problems with older browsers, however,\nplease file a bug report.\n\n### Configuration\n\nBefore you use any of the Daimyo's functions, you should configure Daimyo.\n\n    var postfinance = require('postfinance');\n\n    postfinance.configure({\n      pspid: 'xxxxxxxxxxxxxxxxxxxxxxxx',\n      apiPassword: 'xxxxxxxxxxxxxxxxxxxxxxxx',\n      processorId: 'xxxxxxxxxxxxxxxxxxxxxxxx'\n    });\n\nPostFinance gatway uses transparent redirect method to process credit card\ninformation. The way it works is, user submits the card and billing data\ndirectly to PostFinance, and it redirects the user back to your site attaching a\npayment method token to the request. You have to access to credit card data in\nany part of the work flow. Daimyo provides a `create` method, which allows you\nto create a payment method without using the transparent redirect. You may use\nthis method if you really cannot use the transparent redirect, and you find\nAshigaru to be broken or otherwise unusable for you. You should keep in mind,\nthough, that you have to ensure that sensitive data passing through your site\nis properly secured.  Use SSL for every connection that passes sensitive data,\nand do not use GET requests for such requests. Also make sure that no sensitive\ndata is logged or stored in any part of your application.\n\nOne of the configuration options is `debug`, which enables logging of _all_ \ndata that passes through Daimyo. While it is disabled by default, you should\ntake utmost care to ensure it remains disabled in production. Double-check\nyou app's configuration.\n\n### Configuration locking\n\nNote that Daimyo performs configuration-locking after you call\n`postfinance.configure()` for the first time (and if that's successful). This\nmeans that you will not be able to call `postfinance.configure()` multiple times\nto set different options. You need to set all options beforehand. \n\nThis is a security feature that prevents accidental/malicious resetting of\ncritical options. \n\nCalling `postfinance.option()` will also fail after configuration has been locked.\nYou can use multiple calls to `postfinance.options()` to set an option\nmultiple times and it won't lead to locking if the configuration has not been\nlocked already.\n\nAlthoug using `postfinance.option()` may sound more convenient, you should set all\ncritical core options (including `debug`, `enabled`, and `sandbox`) using the\n`postfinance.configure()` method for security reasons.\n\nFuture version of Daimyo may simply lock any option that has been set once\nwithout errors using either `postfinance.configure()` or `postfinance.option()`, so you\nshould not rely on the behavior of `postfinance.option()` to circumvent\nconfiguration locking.\n\nCurrently, the only exception to configuration locking is the `currency`\nparameter, which can be set any number of times. Future version of Daimyo may\ninclude more such non-critical options.\n\nSee the ``config`` module documentation for more information.\n\n### Card object\n\nIf you chose to use the server-to-server method of creating payment methods,\nyou can create a new payment method using the `create` method. Suppse you have\nreceived billing and creadit card data from your user. You can now create a new\nCard object use that data.\n\n    var card = new postfinance.Card({\n      number: data.cardNumber,\n      csc: data.csc,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      year: data.expirationYear,\n      month: data.expirationMonth,\n      ....\n    });\n\nThe card object has following fields:\n\n + _number_: card number\n + _csc_: card security code (called CCV, CVC, CVV, and various other names)\n + _year_: expiration year (if any)\n + _month_: expiration month\n + _firstName_: card holder's first name\n + _lastName_: card holder's last name\n + _address1_: billing address line 1\n + _address2_: billing address line 2\n + _city_: billing address city\n + _state_: billing address state/region\n + _zip_: billing address zip/postal code\n + _custom_: JSON-serializable object containing arbitrary data you may want to\n   store with your payment method (e.g., user ID)\n\nYou cannot create a card object unless you supply it a payment token, or credit \ncard number and CSC. If you supply it a token, all other fields are ignored. \nOtherwise, card number and CSC are required, and you will get an error if you\ndo not specify them. If you create a card object with credit card and billing\ndetails, you will get one more field:\n\n + _issuer_: name of the credit card's issuer\n\nThe issuer is detected from the card number, and you should not set the field\nmanually (or allow the user to set it).\n\nHere is an example of initializing a new card object:\n\n    var card = new postfinance.Card({\n      number: '4111-1111-1111-1111',\n      csc: '123',\n      year: 2012,\n      month: 11,\n      firstName: 'John',\n      lastName: 'Doe',\n      address1: '123 Payment St',\n      custom: {\n        email: 'jdoe@example.com',\n        timestamp: new Date();\n      }\n    });\n\n    // The card now also has an issuer property:\n    console.log(card.issuer); // This logs 'Visa'\n\n### Basic validation\n\nBefore you call the `create` method, you can perform basic validation to\nincrease the likelyhood of successful transaction.\n\n    card.isValid(); // returns true if card is valid\n    card.isExpired(); // returns true if expired\n\nIn addition to these two methods, you should generally ensure that user\nsupplies correct address and zip code (or postal number), and that expiration\ndate is in future. Note that you are allowed to forward the expiration date \ninto future, as banks do not usually check if it's correct as long as it's in\nfuture. Generally, the more data you supply, your liability will be lower, so \nit's a good idea to supply as much data as possible to the gateway if you\ncannot trust your users 100%.\n\n### Creating the payment method server-side\n\nThe card, when initilized, is still not a valid _payment method_. You have to\nactually create in on PostFinance gateway in order to make purchases. You can do \nthat like so:\n\n    card.create(function(err) {\n      // Handle errors\n      // Card now has a payment method token associated with it\n      console.log(card.token);\n    });\n\nIf there are any errors during the creation process, they will be passed to the \ncallback function. The error object will have following properties:\n\n + _category_: Category of the error ('system' in most cases)\n + _message_: Error message\n + _details_: Any data that give you more details about the error\n\nCommon error messages may include:\n\n + 'Error making create payment method request': Daimyo is not properly\n   configured (e.g., missing PostFinance gateway credentials), or the request\n   failed for some reason and the response was unreadable (e.g., PostFinance was\n   offline)\n + 'Gateway responded with non-302 status': This is rare, but means that\n   PostFinance received malformed data. If this happens, please report it as a bug.\n + 'Gateway failed to send the location header': This is a PostFinance bug, but\n   report it to us anyway.\n\nIn any case, you should consider receiving an error object with 'system'\ncategory a critical failure, and act accordingly. Depending on the nature of\nthe error, you may want to retry, too.\n\nIt is important to note that error related to the actual card information will\n_not_ be passed in error object. These will be available once you load the card\nfrom the gateway, or when you make a transaction.\n\n### Loading the payment method\n\nNow that the card object has a token associated with it, you can either save\nthe token, or perform transactions with it. So, let's say you have stored the \npayment token, either when doing the transparent redirect, or after you created\nthe payment method using the `create` method. You can now use the `load` method\nto fetch payment method details from PostFinance server.\n\n    var myToken = 'xxxxxxxxxxxxxxxxxxxxxxxx';\n    var card = new postfinance.Card({token: myToken});\n    card.load(function(err) {\n      // Handle error\n    });\n\nThe card object has all the fields populated. There are also two new fields:\n\n + messages: contains any PostFinance gateway messages about the card\n + method: contains meta-information about the payment method\n\nSee the API documentation for details on what these fields contain. The error\nobject passed to the callback has the same format as the error object passed to\nthe `create` method. All methods except `create` also have two more possible\nerror messages:\n\n + 'Cannot ACTION payment method without token': (where ACTION is the action\n   you were trying to perform), this means that no token was provided and\n   action requires a valid payment method token.\n + 'Loaded token does not equal the token that was requested': Gateway\n   responded with a token that does not match our token. This indicates a high\n   likelyhood of MITM attack, and you should immediately take the site offline\n   and perform security checks and forensic analysis to ensure no sensitive\n   data has been leaked. (Note that you will not be able to easily uncover a\n   _successful_ MITM attack.)\n\nIn addition, the following error is different from the `create` method:\n\n + 'Gateway responded with non-200 status': This means that the request was\n   malformed, and it is most likely due to a Daimyo bug. Please report full\n   error details along with your bug report.\n\n### Updating the payment method\n\nIf you want to update the card details, you can do so using the `update` \nmethod:\n\n    card.firstName = 'Foo';\n    card.lastName = 'Bar';\n    card.address1 = '241 Bar St.';\n    card.city = 'Fooville';\n    card.update(function(err) {\n      // Handle errors here\n    });\n\nError messages are the same ones expected in `load` method callback.\n\n### Retention and redaction\n\nPostFinance has a built-in vault that can safely store your payment methods. Well,\nthey aren't yours, but... you know what I mean. :) Usage of this vault is\npretty much automatic. As soon as you create a new card, it is stored in the\nvault.\n\nBy default, the stored payment methods will be deleted after 48 hours. If you\nwish to keep the payment methods stored for longer periods, you can use the\n`retain()` method. Let's say you have a newly created card. To retain it,\nsimply instruct the PostFinance to do so:\n\n    card.retain(function(err) {\n      // Error handling here\n      // The card now has a method property, \n      // which contains metadata about\n      // the payment method. It has a `retained`\n      // property which is now set to true:\n      console.log(card.method.retained); // => true\n    });\n\nWhen your user supplies you a new card, or simply wants you to remove their \nrecords, use the `redact()` method to have the card removed from the PostFinance\nvault.\n\n    card.redact(function(err) {\n       // The card.method.retained is still true, but\n       // card.method.redacted is now also true.\n    });\n\nGenerally, you should not keep using a redacted payment method, so make sure\nyou check if the `card.method.redacted` is `true`. Updating the card data is\nusually more efficient using the `update()` method. While it _is_ more\neffiicient, if you are using the transparent redirect method, you should \nredact the old card, and let the user enter a new one. Only use `update()` if \nyou are using the server-to-server method.\n\nAgain, error messages are the same as ones for the `load` and `update`\nmethods.\n\n### Making transactions\n\nTransactions are made using the `postfinance.Transaction` constructor and resulting\ntransaction objects.\n\nThere are currenly 5 transaction types supported by PostFinance: \n\n + _purchase_: make immediate authorization and capture of the funds\n   (immediately debit the user's credit card)\n + _authorize_: instruct the bank to put a hold on specified amount (the funds\n   are reserved, but you do not get the money until you capture)\n + _capture_: capture the funds that have been authorized\n + _void_: void a previously authorized transaction (this releases the hold on\n   the funds)\n + _credit_: reverse the capture (return funds to the user's card in the amount\n   that has been captured via _capture_ or _purchase_).\n\nThe transaction object constructor takes an object with transaction options, \nand the `type` option selects one of the transaction types. Depending on the\ntransaction type, other options may differ.\n\nTransaction-specific data are specified in `data` property of the constructor\noptions object. The data to be passed via this parameter depends on the\ntransaction type, and they are discussed further below. The layout of the\noptions object looks like this:\n\n    var transaction = new postfinance.Transaction({\n      type: 'purchase',\n      data: {\n        amount: 123.45,\n        currency: 'USD',\n        billingReference: 'AX-0002-13',\n        customerReference: 'ab551f23',\n        descriptor: 'Spiffy bike',\n        custom: {originalDate: new Date('2011-06-12 UTC')}\n      }\n    });\n\n#### Purchase and Authorize transactions\n\nFor purchase and authorize transactions, options other than `type` are the\nfollowing:\n\n + _amount_: The transaction amount\n + _currency_: Optional (defaults to the one set in your initial configuration)\n + _billingReference_\n + _customerReference_\n + _descriptor_: description of transaction that will appear in the user's bank\n   statement (if supported by the bank)\n + _custom_: JSON-serializable object containing any data you want to attack to\n   a transaction\n\n#### Capture, Void, and Credit transactions\n\nThese transactions require none of the extra options required by the purchase\nand authorize transactions. Instead they require a transaction ID (returned by\nsuccessful purchase/authorize transactions, see details further below).\n\n + _transactionId_\n\nIn addition, capture and credit take an `amount` option.\n\n#### Transaction data locking\n\nTransaction data cannot be modified after the transaction object is\ninitialized. This is done to prevent tampering by malicious code.\n\n#### Processing transactions\n\nTransaction constructor will not check if you have specified the appropriate\noptions depending on the type of tranasaction. You are expected to be mindful\nabout what options are passed.\n\nOnce you have created the transaction object, you will also need a card object\nwith a `token` (card has a token after creation, or after load). Card object is\nnot required for _credit_ and _void_ transactions. You may pass `null` instead\nof the card object, or omit the first argument for those transactions.\n\nGiven a transaction object, you can now:\n\n   transaction.process(card, function(err) {\n     // Success!\n   });\n\nOnce the transaction is completed, and there are no errors, the transaction\nobject will gain a `receipt` property which should contain data about the\ntransaction, including `transactionId`, and `success` property. The latter\ntells you if the transaction was successful.\n\nIn addition, transaction object will contain a `messages` property, which will\ncontain more details about the transaction if it failed.\n\n#### AVS status messages\n\nAVS (Address Verification System) can return as many as 26 different messages.\nIf you simply want to know if the address was verified or not, you can check if\n`transaction.messages.errors` object contains an `address` key:\n\n    transaction.process(card, function(err) {\n      if (transaction.messages.error && transaction.messages.error.address) {\n        console.error('AVS check failed!');\n      }\n    });\n\nIn some cases, AVS will fail despite the card being valid. This is a common\ncase with non-US cards, or when the issuing bank doesn't support AVS. You can\ntest these conditions by checking the first character of the avs message:\n\n    transaction.process(card, function(err) {\n      var inf = transaction.messages.info || {};\n      if (inf && inf.avs && ['G','E','S','U'].indexOf(inf.avs[0][0] > -1) {\n        // Try updating the card by removing the address\n        // (but not postal code!)\n      } else if (inf && inf.avs) {\n        // Transaction failed because of AVS\n      }\n    });\n\nFor more information on AVS, check the \n[Wikipedia aticle](http://en.wikipedia.org/wiki/Address_Verification_System).\n",
			"file": "GETTING_STARTED.mkd",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 20760,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 8915,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/check.js",
			"settings":
			{
				"buffer_size": 8453,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/postfinance.js",
			"settings":
			{
				"buffer_size": 20458,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/postfinance.card.js",
			"settings":
			{
				"buffer_size": 11799,
				"line_ending": "Unix"
			}
		},
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 869,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/postfinance.1.create.js",
			"settings":
			{
				"buffer_size": 14058,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Toi tu fais 120cm (1m20) chaque semaine tu grandis de 0.5cm (1/2).\ntu as un petit poisson de 5cm. Chaque semaine ton poisson grandi de 13cm. Dans combien de semaine il sera aussi grand que toi?\n",
			"settings":
			{
				"buffer_size": 194,
				"line_ending": "Unix",
				"name": "Toi tu fais 120cm (1m20) chaque semaine tu grandis"
			}
		},
		{
			"file": "lib/transaction.js",
			"settings":
			{
				"buffer_size": 8221,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/postfinance.2.cancel.js",
			"settings":
			{
				"buffer_size": 5243,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test/postfinance.1.validate.sha.js",
			"settings":
			{
				"buffer_size": 4676,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config-pf.js",
			"settings":
			{
				"buffer_size": 191,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 467.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/evaleto/nodejs/git/node-postfinance",
		"/home/evaleto/nodejs/git/node-postfinance/lib",
		"/home/evaleto/nodejs/git/node-postfinance/test",
		"/home/evaleto/nodejs/git/node-postfinance/test/fixtures"
	],
	"file_history":
	[
		"/home/evaleto/nodejs/git/node-postfinance/lib/authpost.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/postfinance.1.create.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/config.js",
		"/home/evaleto/nodejs/git/node-postfinance/package.json",
		"/home/evaleto/nodejs/git/node-postfinance/index.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/error.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/postfinance.card.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/messages.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/check.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/xmlutils.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/transaction.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/postfinance.js",
		"/home/evaleto/nodejs/git/node-postfinance/README.md",
		"/home/evaleto/nodejs/git/node-postfinance/test/postfinance.3.create.disabled.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/error.js",
		"/home/evaleto/nodejs/git/node-postfinance/ecommerce.fields.html",
		"/home/evaleto/nodejs/git/node-postfinance/config-pf.js",
		"/home/evaleto/nodejs/git/node-postfinance/config-example.js",
		"/home/evaleto/nodejs/git/node-postfinance/config.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/config.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/xmlutils.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/postfinance.create.js",
		"/home/evaleto/nodejs/git/node-postfinance/Makefile",
		"/home/evaleto/nodejs/git/node-postfinance/GETTING_STARTED.mkd",
		"/home/evaleto/nodejs/git/node-postfinance/README.mkd",
		"/home/evaleto/nodejs/git/node-postfinance/node-postfinance.sublime-workspace",
		"/home/evaleto/nodejs/git/node-postfinance/port-to-postfiance.mkd",
		"/home/evaleto/nodejs/git/node-postfinance/support/ashigaru.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/check.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/daimyo.tests.js",
		"/home/evaleto/nodejs/git/node-postfinance/test/postfinance.tests.js",
		"/home/evaleto/nodejs/git/node-postfinance/lib/daimyo.js",
		"/home/evaleto/nodejs/git/karibou-api/models/sequences.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.find.user.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.orders.find.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.orders.create.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Users.js",
		"/home/evaleto/nodejs/git/karibou-api/app/routes.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.category.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Orders.find.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.date.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/auth.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/users.js",
		"/home/evaleto/nodejs/git/karibou-api/test/products.find.js",
		"/home/evaleto/nodejs/git/karibou-api/config/config-test.js",
		"/home/evaleto/nodejs/git/karibou-api/config/config-production.js",
		"/home/evaleto/nodejs/git/karibou-api/config/config-development.js",
		"/home/evaleto/nodejs/git/karibou-api/app/bus.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/validate/validate.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/products.js",
		"/home/evaleto/nodejs/git/karibou-api/models/users.js",
		"/home/evaleto/nodejs/git/karibou-api/maintain/0008.order_drop_unknow_index_ac.js",
		"/home/evaleto/nodejs/git/karibou-api/maintain/0009.users_login_date.js",
		"/home/evaleto/nodejs/git/karibou-api/app/db.maintain.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.validate.item.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.create.success.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.find.shop.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.users.create.js",
		"/home/evaleto/nodejs/git/karibou-api/config/config-shop-test.js",
		"/home/evaleto/nodejs/git/karibou-api/app/validator.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.orders.security.js",
		"/home/evaleto/nodejs/git/karibou-api/config/config-shop.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.users.addresses.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Orders.js",
		"/home/evaleto/nodejs/git/karibou-api/test/users.js",
		"/home/evaleto/nodejs/git/karibou-api/app/express.js",
		"/home/evaleto/nodejs/git/karibou-api/package.json",
		"/home/evaleto/nodejs/git/karibou-api/test/api.shops.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.users.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/shops.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/orders.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.find.admin.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Orders.validate.js",
		"/home/evaleto/nodejs/git/karibou-api/models/order.js",
		"/home/evaleto/nodejs/git/karibou-api/node_modules/pow-mongoose-fixtures/mongoose_fixtures.js",
		"/home/evaleto/nodejs/git/karibou-api/app/utils.js",
		"/home/evaleto/nodejs/git/karibou-api/app/passport.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Products.js",
		"/home/evaleto/nodejs/git/karibou-api/models/shops.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.users.likes.js",
		"/home/evaleto/nodejs/git/karibou-api/models/products.js",
		"/home/evaleto/nodejs/git/karibou-api/test/products.create.js",
		"/home/evaleto/nodejs/git/karibou-api/models/categories.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.shops.admin.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Shops.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.products.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/categories.js",
		"/home/evaleto/nodejs/git/karibou-api/app/config.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/api.js",
		"/home/evaleto/nodejs/git/karibou-api/maintain/0007.users_address_region_ge_to_geneve.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/home.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.update.js",
		"/home/evaleto/nodejs/git/karibou-api/app.js",
		"/home/evaleto/nodejs/git/karibou-api/node_modules/passport-persona/lib/passport-persona/strategy.js",
		"/home/evaleto/nodejs/git/karibou-api/views/welcome.jade",
		"/home/evaleto/nodejs/git/karibou-api/app/queue.js",
		"/home/evaleto/nodejs/git/karibou-api/test/system.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.create.js",
		"/home/evaleto/nodejs/git/karibou-api/test/order.find.js",
		"/home/evaleto/nodejs/git/karibou-api/app/mail.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.products.status.find.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.users.status.js",
		"/home/evaleto/nodejs/git/karibou-api/controllers/emails.js",
		"/home/evaleto/nodejs/git/karibou-api/models/emails.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures.js",
		"/home/evaleto/nodejs/git/karibou-api/models/order.validate.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Shops.order.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Products.order.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.products.find.sort.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.products.find.js",
		"/home/evaleto/nodejs/git/karibou-api/models/order.find.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Products.sort.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Products.more.js",
		"/home/evaleto/nodejs/git/karibou-api/test/api.category.find.js",
		"/home/evaleto/nodejs/git/karibou-api/maintain/0006.product_category_is_no_more_an_array.js",
		"/home/evaleto/nodejs/git/karibou-api/maintain/0004.shop_address_localtion_to_geo.js",
		"/home/evaleto/nodejs/git/karibou-api/test/fixtures/Categories.js",
		"/home/evaleto/nodejs/git/karibou-api/config-shop-test.js",
		"/home/evaleto/nodejs/git/karibou-api/config-test.js",
		"/home/evaleto/nodejs/git/karibou-api/config-development.js",
		"/home/evaleto/nodejs/git/karibou-api/node_modules/validator/lib/validators.js",
		"/home/evaleto/nodejs/git/karibou-api/config-production.js",
		"/home/evaleto/nodejs/git/karibou-api/test/shops.js",
		"/home/evaleto/nodejs/git/karibou-api/app/index.js",
		"/home/evaleto/nodejs/git/karibou-api/docs/maintain.txt",
		"/home/evaleto/nodejs/git/karibou-api/node_modules/passport/lib/passport/middleware/initialize.js",
		"/home/evaleto/nodejs/git/karibou-api/node_modules/passport-local/lib/passport-local/strategy.js",
		"/home/evaleto/nodejs/git/karibou-api/node_modules/express/node_modules/connect/lib/middleware/session.js"
	],
	"find":
	{
		"height": 52.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"getPayload",
			"withForm",
			"getPayload",
			"ecommerceForm",
			"MAP_PROCESS",
			",",
			"PAYID",
			"\",\"",
			",",
			"testCard",
			"ECI",
			"conso",
			"signS",
			"signIn",
			"check",
			"pspData",
			"pspDataFormatted",
			"pspData",
			"pspDataFormatted",
			"pspData",
			"SHASIN",
			"paymentData",
			"getPayload",
			"postfinanceCard",
			"Foo",
			"getPayload",
			"withHmac",
			"getPayload",
			"Postfinance",
			"paymentMethod",
			"issu",
			"postfinanceCard",
			"getPayload",
			"payload",
			"ecommerce",
			"publishEcomerce",
			"ecommerce",
			"getPayload",
			"requestPaymentPage",
			"address1",
			"paymentMethod",
			"bogusCard",
			"sandboxInvalidCard",
			"sandboxValidCard",
			"requestPaymentPage",
			"globalCard",
			"getPayload",
			",",
			"testAlias",
			"capture",
			"toJSON",
			",",
			"\",\"",
			",",
			"transaction",
			"testAlias",
			"authorisation",
			"_type_",
			"sharedTransaction",
			"shaWithSecret",
			"sandbox",
			"thro",
			"testSettings",
			"issu",
			"4",
			"digi",
			"last",
			"parseMessages",
			"conso",
			"redact",
			"MAP_PROCESS",
			"tokenOpts",
			"create",
			".create(",
			"self",
			".create(",
			"self.create",
			"this.create",
			"create",
			".create",
			"create",
			"testCard",
			"sandboxValidCard",
			"conso",
			"MAP_PROCESS",
			"conso",
			"MAP_PROCESS",
			"bogusCard",
			"config",
			"sandboxInvalidCard",
			"MAP_PROCESS",
			"10000",
			"requestPaymentPage",
			"debug",
			"type",
			"globalCard",
			"payId",
			",",
			"    \"",
			",",
			"NCSTATUS",
			"\",\"",
			",",
			"CUSTOM",
			"conso",
			"testAlias",
			"getPayload",
			"retain",
			"createAlias",
			"testSettings",
			"Daimyo",
			"debug",
			"payload",
			"debug",
			"processorId",
			"USD",
			"globalCard",
			"debug",
			"testpostfinance",
			"number",
			"self",
			"payid",
			"orderId",
			"getPayload",
			"testAlias",
			"_resetDirty",
			"generateCreds",
			"1"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			".publish(",
			"msg:\"",
			"alias",
			"PSPID",
			"pspid",
			"alias",
			"POSTFINANCE",
			"postfinance",
			"PostFinanceError",
			"req.body.",
			"",
			"isSlug()",
			"require('../app/validator')",
			"isBoolean()"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "GETTING_STARTED.mkd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20760,
						"regions":
						{
						},
						"selection":
						[
							[
								1778,
								1778
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 99.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8915,
						"regions":
						{
						},
						"selection":
						[
							[
								8915,
								8915
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5091.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/check.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8453,
						"regions":
						{
						},
						"selection":
						[
							[
								8367,
								8367
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5808.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/postfinance.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20458,
						"regions":
						{
						},
						"selection":
						[
							[
								15139,
								15139
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12987.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test/postfinance.card.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11799,
						"regions":
						{
						},
						"selection":
						[
							[
								269,
								269
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 869,
						"regions":
						{
						},
						"selection":
						[
							[
								138,
								138
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "test/postfinance.1.create.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14058,
						"regions":
						{
						},
						"selection":
						[
							[
								8674,
								8674
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 7776.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 194,
						"regions":
						{
						},
						"selection":
						[
							[
								194,
								194
							]
						],
						"settings":
						{
							"auto_name": "Toi tu fais 120cm (1m20) chaque semaine tu grandis",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/transaction.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8221,
						"regions":
						{
						},
						"selection":
						[
							[
								3765,
								3765
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2943.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 9,
					"file": "test/postfinance.2.cancel.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5243,
						"regions":
						{
						},
						"selection":
						[
							[
								4230,
								4230
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3075.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "test/postfinance.1.validate.sha.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4676,
						"regions":
						{
						},
						"selection":
						[
							[
								1921,
								1921
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1656.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "config-pf.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 191,
						"regions":
						{
						},
						"selection":
						[
							[
								167,
								167
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.556427648509,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "node-postfinance.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"con",
				"config-pf.js"
			],
			[
				"or",
				"test/order.find.js"
			],
			[
				"produ",
				"test/products.create.js"
			],
			[
				"user",
				"test/users.js"
			],
			[
				"api.u",
				"test/api.users.js"
			],
			[
				"order.v",
				"test/order.validate.item.js"
			],
			[
				"api.or",
				"test/api.orders.create.js"
			],
			[
				"order.c",
				"test/order.create.js"
			],
			[
				"api.s",
				"test/api.shops.admin.js"
			],
			[
				"pro",
				"test/fixtures/Products.js"
			],
			[
				"api.pr",
				"test/api.products.js"
			],
			[
				"api.sh",
				"test/api.shops.admin.js"
			],
			[
				"rout",
				"app/routes.js"
			],
			[
				"au",
				"controllers/auth.js"
			],
			[
				"sh",
				"models/shops.js"
			],
			[
				"qu",
				"app/queue.js"
			],
			[
				"",
				"node_modules/queue-async/queue.js"
			],
			[
				"que",
				"node_modules/queue-async/queue.js"
			],
			[
				"app",
				"app.js"
			],
			[
				"order",
				"models/order.js"
			],
			[
				"api.p",
				"test/api.products.find.js"
			],
			[
				"prod",
				"models/products.js"
			],
			[
				"order.fin",
				"test/order.find.js"
			],
			[
				"ex",
				"app/express.js"
			],
			[
				"mai",
				"app/mail.js"
			],
			[
				"order.crea",
				"test/order.create.js"
			],
			[
				"order.cre",
				"test/order.create.js"
			],
			[
				"users",
				"models/users.js"
			],
			[
				"o.find",
				"test/fixtures/Orders.find.js"
			],
			[
				"conf",
				"config/config-shop.js"
			],
			[
				"fixtu",
				"test/fixtures.js"
			],
			[
				"o.item",
				"test/order.validate.item.js"
			],
			[
				"os.va",
				"test/fixtures/Orders.validate.js"
			],
			[
				"o.va",
				"models/order.validate.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 387.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
